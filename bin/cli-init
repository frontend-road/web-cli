#!/usr/bin/env node

const path = require('path')
const program = require('commander')
const chalk = require('chalk')
const semver = require('semver')
const inquirer = require('inquirer')
const ora = require('ora')
const package = require('../package.json')
const generate = require('../lib/generate')

program
  .version(package.version)
  // .option('-d, --debug', 'output extra debugging')
  // .option('-s, --small', 'small pizza size')
  // .option('-p, --pizza-type <type>', 'flavour of pizza')
  // .command('init', 'create a vue project')
  // .command('build', 'build a project')

program.on('--help', () => {
  console.log()
  console.log(chalk.blue('  用模板创建一个项目'))
  console.log(' $ cli init webpack-simple test')
  console.log()
})

function checkNodeVersion(wanted, id) {
  if (!semver.satisfies(process.version, wanted)) {
    console.log(chalk.cyan(`当前 Node.js 版本是 ${process.version}，但是此项目 ${id} 需要的版本为 ${wanted}`))
    process.exit(1)
  }
}
checkNodeVersion(package.engines.node, 'cli')

// program.parse(process.argv)

// console.log(process.argv)
// console.log(program.args)

function help() {
  program.parse(process.argv)
  console.log('program.args:', program.args)
  if (program.args.length < 1) {
    return program.help()
  }
}
help()

// cli init webpack test
// cli init webpack .
// cli init webpack
const template = program.args[0]
const rawName = program.args[1]
const inPlace = !rawName || rawName === '.' || rawName === './'
const name = inPlace ? path.resolve('../', process.cwd()) : rawName
const templateRoot = path.resolve(__dirname, '../templates') // https://github.com/vuejs-templates/
const src = path.join(templateRoot, template)
const to = path.resolve(rawName || '.')

console.log('template:', template)
console.log('rawName:', rawName)
console.log('是否当前目录:', inPlace)
console.log('name:', name)
console.log('src:', src)
console.log('to:', to)

inquirer.prompt([
  // {
  //   type: 'confirm',
  //   name: 'confirm-test',
  //   message: inPlace ? '在当前目录创建' : `新创建一个目录${rawName}，是否继续？`
  // },
  // {
  //   type: 'input',
  //   name: 'input-test'
  // },
  // {
  //   type: 'checkbox',
  //   name: 'checkbox-test',
  //   choices: ['Choice A', 'Choice B', new inquirer.Separator(), 'Choice C', 'Choice D']
  // },
  // {
  //   type: 'password',
  //   name: 'password-test'
  // },
  //如果在当前目录，提示在当前目录，否则提示新创建一个目录，是否继续
  {
    type: 'confirm',
    name: 'ok',
    message: inPlace ? '在当前目录创建' : `新创建一个目录${rawName}，是否继续？`,
    default: true
  }
]).then(answers => {
  console.log(answers)
  if (answers['ok']) {
    console.log(chalk.green(`starting copy template ${template}`))
    run()
  } else {
    console.log(chalk.red('init canceled'))
  }
})

function run() {
  const spinner = ora({
    text: `Coping template ${chalk.greenBright(template)}`,
    prefixText: '🇨🇳',
    spinner: 'dots',
    color: 'white',
  })
  // .start()

  // setTimeout(() => {
  //   spinner.color = 'green'
  //   spinner.text = 'Loading rainbows'
  // }, 3000)
  // setTimeout(() => {
  //   spinner.stop()
  // }, 6000)

  // 读取用户输入
  // 将目录 src 下的模板文件经过 handlebars 处理后生成新的文件
  // 然后拷贝到指定目录 to 里面
  generate(name, src, to, (err) => {
    if (err) {
      console.log(chalk.red(err.message))
      process.exit(1)
    }
    console.log(chalk.green('Generate template successfully!'))
    // spinner.stop()
  })
}
